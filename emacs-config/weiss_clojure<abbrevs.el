(when (boundp 'clojure-mode-abbrev-table)
  (clear-abbrev-table clojure-mode-abbrev-table))

(define-abbrev-table 'clojure-mode-abbrev-table
  '(
    ("pt" "println" weiss--ahf)
    ("def" "(def ▮)" weiss--ahf)
    ("fn" "(fn [▮])" weiss--ahf)
    ("defn" "(defn ▮ \n[]\n\n)" weiss--ahf-indent)
    ("l" "let" weiss--ahf-indent)
    ("let" "(let [▮\n]\n)" weiss--ahf-indent)
    ("loop" "(loop [▮\n]\n(if \n(recur )))" weiss--ahf-indent)
    ("case" "(case ▮\n\n)" weiss--ahf-indent)
    ("println" "(println ▮)" weiss--ahf)
    ("print" "(print ▮)" weiss--ahf)
    ("into" "(into ▮)" weiss--ahf)
    ("red" "(reduce ▮)" weiss--ahf)
    ("set" "(set ▮)" weiss--ahf)
    ("when" "(when ▮)" weiss--ahf)
    ("if" "(if ▮)" weiss--ahf)
    ("not" "(not ▮)" weiss--ahf)
    ("eq" "(= ▮)" weiss--ahf)
    ("conj" "(conj ▮)" weiss--ahf)
    ("map" "(map ▮)" weiss--ahf)
    ("css" "(clojure.string/split ▮ #\"\")" weiss--ahf)
    ("sl" "slurp"  weiss--ahf)
    ("slurp" "(slurp ▮)" weiss--ahf)
    ("fst" "first" weiss--ahf)
    ("first" "(first ▮)" weiss--ahf)
    ("snd" "second" weiss--ahf)
    ("second" "(second ▮)" weiss--ahf)
    ("wt" "(defn weiss-test\n[▮]\n\n)" weiss--ahf-indent)
    ("cons" "(cons ▮)" weiss--ahf)
    ("ar" "(-> ▮)" weiss--ahf)
    ("arr" "(->> ▮)" weiss--ahf)
    ("and" "(and ▮)" weiss--ahf)
    ("ct" "count" weiss--ahf)
    ("apply" "(apply ▮)" weiss--ahf)
    ("concat" "(concat ▮)" weiss--ahf)
    ("rest" "(rest ▮)" weiss--ahf)
    ("count" "(count ▮)" weiss--ahf)
    ("nth" "(nth ▮)" weiss--ahf)
    ("reduce" "(reduce ▮)" weiss--ahf)
    ("do" "(do \n▮\n)" weiss--ahf-indent)
    ("str" "(str ▮)"  weiss--ahf)
    ("cs" "clojure.string"  weiss--ahf)
    ("clojure.string" "(clojure.string/▮)"  weiss--ahf)
    ("pop" "(pop ▮)"  weiss--ahf)
    ("drop" "(drop 1 ▮)"  weiss--ahf)
    ("or" "(or ▮)"  weiss--ahf)
    ("f" "format"  weiss--ahf)
    ("format" "(format \"%s\" ▮)"  weiss--ahf)
    ("take" "(take ▮)"  weiss--ahf)
    ("cond" "(cond\n ▮\n:else\n)"  weiss--ahf-indent)
    ("last" "(last ▮)"  weiss--ahf-indent)
    
    ("hfm" "(sql/format)")
    ("hfmp" "(sql/format {:pretty true})")
    ("hct" ":%count.*" weiss--ahf)
    ("hdi" "(h/select-distinct :▮) " weiss--ahf)
    ("hgb" "(h/group-by :▮)" weiss--ahf-indent)
    ("hii" "(h/insert-into :▮)\n(h/values [{:}])" weiss--ahf-indent)
    ("hli" "(h/limit ▮)" weiss--ahf)
    ("hob" "(h/order-by :▮)" weiss--ahf-indent)
    ("hsf" "(h/select :▮)\n(h/from :)" weiss--ahf-indent)
    ("hsfw" "(h/select :▮)\n(h/from :)\n(h/where [:= :])" weiss--ahf-indent)
    ("sl" "(h/select :▮)" weiss--ahf-indent)
    ("hwh" "(h/where [:= :▮])" weiss--ahf-indent)
    ("heq" "[:= :▮]" weiss--ahf-indent)
    ("hlj" "(h/join :▮ [:= : :])" weiss--ahf-indent)
    ("hljo" "(h/left-join [:▮] [:= : :])" weiss--ahf)
    ("not" ":not▮" weiss--ahf-indent)
    ("hin" "[:in : []]" weiss--ahf-indent)    
    ("hor" "[:or\n]" weiss--ahf-indent)
    ("thex" "(throw (Exception. (str ▮)))" weiss--ahf)
    ("reduce" "(reduce (fn [res elem] ▮) l)" weiss--ahf-indent)
    ("doseq" "(doseq [▮\n]\n)" weiss--ahf-indent)
    ("try" "(try (▮ (throw (ex-info \"exception\" {})))\n(catch clojure.lang.ExceptionInfo e (prn \"caught\" e)))" weiss--ahf-indent)    

    ))



;; parent: 
(provide 'weiss_clojure<abbrevs)
